Resources:
  EC2II9LP:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5bf08bc8017c83b
      InstanceType: t2.micro
      KeyName: ohioaccesskey
      
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AllowEC2Traffic
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      VpcId: !Ref PubPrivateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  PubPrivateVPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 145.0.0.0/16
          EnableDnsSupport: true
          EnableDnsHostnames: true
     
  PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-2a
          CidrBlock: 145.0.1.0/24
          MapPublicIpOnLaunch: true
     
  PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-2b
          CidrBlock: 145.0.2.0/24
          MapPublicIpOnLaunch: true
     
  PrivateSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-2a
          CidrBlock: 145.0.3.0/24
          MapPublicIpOnLaunch: false
     
  PrivateSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-2b
          CidrBlock: 145.0.4.0/24
          MapPublicIpOnLaunch: false
     
      
  InternetGateway:
        Type: AWS::EC2::InternetGateway
        
          
            
              
            
              
      
  GatewayToInternet:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: !Ref PubPrivateVPC
          InternetGatewayId: !Ref InternetGateway
      
  PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
          Tags:
            - Key: Network
              Value: Public
      
  PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayToInternet
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
     
  PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
  PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable
     
  NatGateway:
        Type: "AWS::EC2::NatGateway"
        DependsOn: NatPublicIP
        Properties: 
          AllocationId: !GetAtt NatPublicIP.AllocationId
          SubnetId: !Ref PublicSubnet1
     
  NatPublicIP:
        Type: "AWS::EC2::EIP"
        DependsOn: PubPrivateVPC
        Properties:
          Domain: vpc
     
  PrivateRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
          VpcId: !Ref PubPrivateVPC
          Tags:
            - Key: Network
              Value: Private
      
  PrivateRoute:
        Type: 'AWS::EC2::Route'
        Properties:
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway
     
  PrivateSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable
     
  PrivateSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref PrivateSubnet2
          RouteTableId: !Ref PrivateRouteTable

